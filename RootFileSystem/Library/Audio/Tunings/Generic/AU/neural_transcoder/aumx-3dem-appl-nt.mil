program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "5.25.0"}, {"coremlc-version", "1704.0.0.0.3"}})]
{
    func main<ios15>(tensor<fp32, [1, 4, 1920]> audio, tensor<fp16, [1, 4, 64]> cast_229_in_state, tensor<fp16, [1, 4608, 1]> input1_2_cast_in_state, tensor<fp16, [1, 256, 1]> input_12_cast_elementwise_in_state, tensor<fp16, [1, 256, 2]> input_13_cast_elementwise_in_state, tensor<fp16, [1, 256, 4]> input_17_cast_in_state, tensor<fp16, [1, 256, 4]> input_23_cast_elementwise_in_state, tensor<fp16, [1, 256, 8]> input_27_cast_in_state, tensor<fp16, [1, 256, 8]> input_33_cast_elementwise_in_state, tensor<fp16, [1, 256, 16]> input_37_cast_in_state, tensor<fp16, [1, 256, 32]> input_47_cast_in_state, tensor<fp16, [1, 256, 256]> input_4_cast_in_state, tensor<fp16, [1, 256, 64]> input_57_cast_in_state, tensor<fp16, [1, 256, 128]> input_67_cast_in_state, tensor<fp16, [1, 256, 2]> input_7_cast_in_state, tensor<fp16, [1, 1, 384, 15]> var_484_cast_elementwise_in_state) [FlexibleShapeInformation = tuple<tuple<tensor<string, []>, dict<tensor<string, []>, tensor<int32, [?]>>>, tuple<tensor<string, []>, dict<tensor<string, []>, list<tensor<int32, [2]>, ?>>>>((("DefaultShapes", {{"audio", [1, 4, 1920]}}), ("RangeDims", {{"audio", [[1, 1], [4, 4], [1920, 1920]]}}))), UserMetadata = dict<tensor<string, []>, tensor<string, []>>({{"iteration", "562569"}, {"taskid", "ubeyh3afn8"}})] {
            tensor<int32, []> var_3 = const()[name = tensor<string, []>("op_3"), val = tensor<int32, []>(12)];
            tensor<int32, []> var_4 = const()[name = tensor<string, []>("op_4"), val = tensor<int32, []>(256)];
            tensor<bool, []> var_12 = const()[name = tensor<string, []>("op_12"), val = tensor<bool, []>(true)];
            tensor<int32, []> var_16 = const()[name = tensor<string, []>("op_16"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_26 = const()[name = tensor<string, []>("op_26"), val = tensor<int32, [1]>([64])];
            tensor<int32, [1]> var_28 = const()[name = tensor<string, []>("op_28"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input0_1_pad_type_0 = const()[name = tensor<string, []>("input0_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input0_1_pad_0 = const()[name = tensor<string, []>("input0_1_pad_0"), val = tensor<int32, [2]>([64, 64])];
            tensor<string, []> audio_to_fp16_dtype_0 = const()[name = tensor<string, []>("audio_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [384, 4, 128]> stem_front_end_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_front_end_0_weight_to_fp16"), val = tensor<fp16, [384, 4, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [1, 4, 1920]> cast_229 = cast(dtype = audio_to_fp16_dtype_0, x = audio);
            tensor<fp16, [1, 4, 1984]> cast_229_expanded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (cast_229_in_state, cast_229));
            tensor<fp16, [1, 4, 64]> cast_229_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -64]), size = tensor<int32, [3]>([1, 4, 64]), x = cast_229_expanded);
            tensor<fp16, [1, 384, 30]> input0_1_cast = conv(dilations = tensor<int32, [1]>([1]), groups = tensor<int32, []>(1), pad = tensor<int32, [2]>([0, 0]), pad_type = tensor<string, []>("custom"), strides = tensor<int32, [1]>([64]), weight = stem_front_end_0_weight_to_fp16, x = cast_229_expanded);
            tensor<fp16, [1, 384, 30]> var_31_cast = relu(x = input0_1_cast);
            tensor<int32, [1]> var_36 = const()[name = tensor<string, []>("op_36"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_4_cast = reduce_mean(axes = var_36, keep_dims = var_12, x = var_31_cast);
            tensor<fp16, [1, 384, 30]> sub_0_cast = sub(x = var_31_cast, y = mean_y_4_cast);
            tensor<fp16, [1, 384, 30]> square_0_cast = square(x = sub_0_cast);
            tensor<int32, [1]> reduce_mean_1_axes_0 = const()[name = tensor<string, []>("reduce_mean_1_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_1_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_1_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_1_cast = reduce_mean(axes = reduce_mean_1_axes_0, keep_dims = reduce_mean_1_keep_dims_0, x = square_0_cast);
            tensor<fp16, [1, 1, 30]> sqrt_0_cast = sqrt(x = reduce_mean_1_cast);
            tensor<fp16, []> mul_0_y_0_to_fp16 = const()[name = tensor<string, []>("mul_0_y_0_to_fp16"), val = tensor<fp16, []>(0x1.004p+0)];
            tensor<fp16, [1, 1, 30]> mul_0_cast = mul(x = sqrt_0_cast, y = mul_0_y_0_to_fp16);
            tensor<fp16, []> var_40_to_fp16 = const()[name = tensor<string, []>("op_40_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_4_cast = add(x = mul_0_cast, y = var_40_to_fp16);
            tensor<fp16, [1, 384, 1]> stem_front_norm_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_front_norm_norm_gamma_to_fp16"), val = tensor<fp16, [1, 384, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(393344)))];
            tensor<fp16, [1, 384, 30]> var_43_cast = mul(x = stem_front_norm_norm_gamma_to_fp16, y = sub_0_cast);
            tensor<fp16, [1, 384, 30]> var_44_cast = real_div(x = var_43_cast, y = std_y_4_cast);
            tensor<fp16, [1, 384, 1]> stem_front_norm_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_front_norm_norm_beta_to_fp16"), val = tensor<fp16, [1, 384, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(394176)))];
            tensor<fp16, [1, 384, 30]> input_8_cast = add(x = var_44_cast, y = stem_front_norm_norm_beta_to_fp16);
            tensor<int32, [1]> var_47 = const()[name = tensor<string, []>("op_47"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_49 = const()[name = tensor<string, []>("op_49"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_12_pad_type_0 = const()[name = tensor<string, []>("input_12_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_12_pad_0 = const()[name = tensor<string, []>("input_12_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 384, 1]> stem_to_latent_weight_to_fp16 = const()[name = tensor<string, []>("stem_to_latent_weight_to_fp16"), val = tensor<fp16, [256, 384, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(395008)))];
            tensor<fp16, [1, 256, 30]> input_12_cast = conv(dilations = var_49, groups = var_16, pad = input_12_pad_0, pad_type = input_12_pad_type_0, strides = var_47, weight = stem_to_latent_weight_to_fp16, x = input_8_cast);
            tensor<int32, [1]> var_68 = const()[name = tensor<string, []>("op_68"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_70 = const()[name = tensor<string, []>("op_70"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_5_pad_type_0 = const()[name = tensor<string, []>("input_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_5_pad_0 = const()[name = tensor<string, []>("input_5_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_0_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_0_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(591680)))];
            tensor<fp16, [1, 256, 30]> input_5_cast = conv(dilations = var_70, groups = var_16, pad = input_5_pad_0, pad_type = input_5_pad_type_0, strides = var_68, weight = stem_sep_module_0_tcn_0_weight_to_fp16, x = input_12_cast);
            tensor<fp16, [256]> var_74_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_74_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(722816)))];
            tensor<fp16, [1, 256, 30]> var_74_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.06p-2), x = input_5_cast);
            tensor<int32, [1]> var_78 = const()[name = tensor<string, []>("op_78"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_3_cast = reduce_mean(axes = var_78, keep_dims = var_12, x = var_74_cast);
            tensor<fp16, [1, 256, 30]> sub_1_cast = sub(x = var_74_cast, y = mean_y_3_cast);
            tensor<fp16, [1, 256, 30]> square_1_cast = square(x = sub_1_cast);
            tensor<int32, [1]> reduce_mean_3_axes_0 = const()[name = tensor<string, []>("reduce_mean_3_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_3_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_3_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_3_cast = reduce_mean(axes = reduce_mean_3_axes_0, keep_dims = reduce_mean_3_keep_dims_0, x = square_1_cast);
            tensor<fp16, [1, 1, 30]> sqrt_1_cast = sqrt(x = reduce_mean_3_cast);
            tensor<fp16, []> mul_1_y_0_to_fp16 = const()[name = tensor<string, []>("mul_1_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_1_cast = mul(x = sqrt_1_cast, y = mul_1_y_0_to_fp16);
            tensor<fp16, []> var_82_to_fp16 = const()[name = tensor<string, []>("op_82_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_3_cast = add(x = mul_1_cast, y = var_82_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_0_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_0_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(723392)))];
            tensor<fp16, [1, 256, 30]> var_85_cast = mul(x = stem_sep_module_0_tcn_2_norm_gamma_to_fp16, y = sub_1_cast);
            tensor<fp16, [1, 256, 30]> var_86_cast = real_div(x = var_85_cast, y = std_y_3_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_0_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_0_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(723968)))];
            tensor<fp16, [1, 256, 30]> input_7_cast = add(x = var_86_cast, y = stem_sep_module_0_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 1, 1])];
            tensor<string, []> input_9_mode_0 = const()[name = tensor<string, []>("input_9_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_9_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_9_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 32]> input_9_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_7_cast_in_state, input_7_cast));
            tensor<fp16, [1, 256, 2]> input_7_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -2]), size = tensor<int32, [3]>([1, 256, 2]), x = input_9_cast);
            tensor<int32, [1]> var_91 = const()[name = tensor<string, []>("op_91"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_93 = const()[name = tensor<string, []>("op_93"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_11_pad_type_0 = const()[name = tensor<string, []>("input_11_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_11_pad_0 = const()[name = tensor<string, []>("input_11_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_0_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_0_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(724544)))];
            tensor<fp16, [1, 256, 30]> input_11_cast = conv(dilations = var_93, groups = var_4, pad = input_11_pad_0, pad_type = input_11_pad_type_0, strides = var_91, weight = stem_sep_module_0_tcn_4_weight_to_fp16, x = input_9_cast);
            tensor<fp16, [256]> var_97_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_97_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(726144)))];
            tensor<fp16, [1, 256, 30]> var_97_cast = leaky_relu(alpha = tensor<fp16, []>(-0x1.ff4p-4), x = input_11_cast);
            tensor<int32, [1]> var_101 = const()[name = tensor<string, []>("op_101"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_5_cast = reduce_mean(axes = var_101, keep_dims = var_12, x = var_97_cast);
            tensor<fp16, [1, 256, 30]> sub_2_cast = sub(x = var_97_cast, y = mean_y_5_cast);
            tensor<fp16, [1, 256, 30]> square_2_cast = square(x = sub_2_cast);
            tensor<int32, [1]> reduce_mean_5_axes_0 = const()[name = tensor<string, []>("reduce_mean_5_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_5_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_5_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_5_cast = reduce_mean(axes = reduce_mean_5_axes_0, keep_dims = reduce_mean_5_keep_dims_0, x = square_2_cast);
            tensor<fp16, [1, 1, 30]> sqrt_2_cast = sqrt(x = reduce_mean_5_cast);
            tensor<fp16, []> mul_2_y_0_to_fp16 = const()[name = tensor<string, []>("mul_2_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_2_cast = mul(x = sqrt_2_cast, y = mul_2_y_0_to_fp16);
            tensor<fp16, []> var_105_to_fp16 = const()[name = tensor<string, []>("op_105_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_5_cast = add(x = mul_2_cast, y = var_105_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_0_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_0_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(726720)))];
            tensor<fp16, [1, 256, 30]> var_108_cast = mul(x = stem_sep_module_0_tcn_6_norm_gamma_to_fp16, y = sub_2_cast);
            tensor<fp16, [1, 256, 30]> var_109_cast = real_div(x = var_108_cast, y = std_y_5_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_0_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_0_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(727296)))];
            tensor<fp16, [1, 256, 30]> y_2_cast = add(x = var_109_cast, y = stem_sep_module_0_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 31]> input_12_cast_elementwise_expanded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_12_cast_elementwise_in_state, input_12_cast));
            tensor<fp16, [1, 256, 30]> input_12_cast_elementwise_delayed = slice_by_size(begin = tensor<int32, [3]>([0, 0, 0]), size = tensor<int32, [3]>([1, 256, 30]), x = input_12_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 1]> input_12_cast_elementwise_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -1]), size = tensor<int32, [3]>([1, 256, 1]), x = input_12_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 30]> input_13_cast = add(x = input_12_cast_elementwise_delayed, y = y_2_cast);
            tensor<int32, [1]> var_120 = const()[name = tensor<string, []>("op_120"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_122 = const()[name = tensor<string, []>("op_122"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_15_pad_type_0 = const()[name = tensor<string, []>("input_15_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_15_pad_0 = const()[name = tensor<string, []>("input_15_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_1_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_1_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(727872)))];
            tensor<fp16, [1, 256, 30]> input_15_cast = conv(dilations = var_122, groups = var_16, pad = input_15_pad_0, pad_type = input_15_pad_type_0, strides = var_120, weight = stem_sep_module_1_tcn_0_weight_to_fp16, x = input_13_cast);
            tensor<fp16, [256]> var_126_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_126_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(859008)))];
            tensor<fp16, [1, 256, 30]> var_126_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.184p-1), x = input_15_cast);
            tensor<int32, [1]> var_130 = const()[name = tensor<string, []>("op_130"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_7_cast = reduce_mean(axes = var_130, keep_dims = var_12, x = var_126_cast);
            tensor<fp16, [1, 256, 30]> sub_3_cast = sub(x = var_126_cast, y = mean_y_7_cast);
            tensor<fp16, [1, 256, 30]> square_3_cast = square(x = sub_3_cast);
            tensor<int32, [1]> reduce_mean_7_axes_0 = const()[name = tensor<string, []>("reduce_mean_7_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_7_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_7_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_7_cast = reduce_mean(axes = reduce_mean_7_axes_0, keep_dims = reduce_mean_7_keep_dims_0, x = square_3_cast);
            tensor<fp16, [1, 1, 30]> sqrt_3_cast = sqrt(x = reduce_mean_7_cast);
            tensor<fp16, []> mul_3_y_0_to_fp16 = const()[name = tensor<string, []>("mul_3_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_3_cast = mul(x = sqrt_3_cast, y = mul_3_y_0_to_fp16);
            tensor<fp16, []> var_134_to_fp16 = const()[name = tensor<string, []>("op_134_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_7_cast = add(x = mul_3_cast, y = var_134_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_1_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_1_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(859584)))];
            tensor<fp16, [1, 256, 30]> var_137_cast = mul(x = stem_sep_module_1_tcn_2_norm_gamma_to_fp16, y = sub_3_cast);
            tensor<fp16, [1, 256, 30]> var_138_cast = real_div(x = var_137_cast, y = std_y_7_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_1_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_1_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(860160)))];
            tensor<fp16, [1, 256, 30]> input_17_cast = add(x = var_138_cast, y = stem_sep_module_1_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 2, 2])];
            tensor<string, []> input_19_mode_0 = const()[name = tensor<string, []>("input_19_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_19_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_19_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 34]> input_19_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_17_cast_in_state, input_17_cast));
            tensor<fp16, [1, 256, 4]> input_17_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -4]), size = tensor<int32, [3]>([1, 256, 4]), x = input_19_cast);
            tensor<int32, [1]> var_143 = const()[name = tensor<string, []>("op_143"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_145 = const()[name = tensor<string, []>("op_145"), val = tensor<int32, [1]>([2])];
            tensor<string, []> input_21_pad_type_0 = const()[name = tensor<string, []>("input_21_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_21_pad_0 = const()[name = tensor<string, []>("input_21_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_1_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_1_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(860736)))];
            tensor<fp16, [1, 256, 30]> input_21_cast = conv(dilations = var_145, groups = var_4, pad = input_21_pad_0, pad_type = input_21_pad_type_0, strides = var_143, weight = stem_sep_module_1_tcn_4_weight_to_fp16, x = input_19_cast);
            tensor<fp16, [256]> var_149_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_149_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(862336)))];
            tensor<fp16, [1, 256, 30]> var_149_cast = leaky_relu(alpha = tensor<fp16, []>(-0x1.718p-6), x = input_21_cast);
            tensor<int32, [1]> var_153 = const()[name = tensor<string, []>("op_153"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_9_cast = reduce_mean(axes = var_153, keep_dims = var_12, x = var_149_cast);
            tensor<fp16, [1, 256, 30]> sub_4_cast = sub(x = var_149_cast, y = mean_y_9_cast);
            tensor<fp16, [1, 256, 30]> square_4_cast = square(x = sub_4_cast);
            tensor<int32, [1]> reduce_mean_9_axes_0 = const()[name = tensor<string, []>("reduce_mean_9_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_9_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_9_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_9_cast = reduce_mean(axes = reduce_mean_9_axes_0, keep_dims = reduce_mean_9_keep_dims_0, x = square_4_cast);
            tensor<fp16, [1, 1, 30]> sqrt_4_cast = sqrt(x = reduce_mean_9_cast);
            tensor<fp16, []> mul_4_y_0_to_fp16 = const()[name = tensor<string, []>("mul_4_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_4_cast = mul(x = sqrt_4_cast, y = mul_4_y_0_to_fp16);
            tensor<fp16, []> var_157_to_fp16 = const()[name = tensor<string, []>("op_157_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_9_cast = add(x = mul_4_cast, y = var_157_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_1_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_1_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(862912)))];
            tensor<fp16, [1, 256, 30]> var_160_cast = mul(x = stem_sep_module_1_tcn_6_norm_gamma_to_fp16, y = sub_4_cast);
            tensor<fp16, [1, 256, 30]> var_161_cast = real_div(x = var_160_cast, y = std_y_9_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_1_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_1_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(863488)))];
            tensor<fp16, [1, 256, 30]> y_4_cast = add(x = var_161_cast, y = stem_sep_module_1_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 32]> input_13_cast_elementwise_expanded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_13_cast_elementwise_in_state, input_13_cast));
            tensor<fp16, [1, 256, 30]> input_13_cast_elementwise_delayed = slice_by_size(begin = tensor<int32, [3]>([0, 0, 0]), size = tensor<int32, [3]>([1, 256, 30]), x = input_13_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 2]> input_13_cast_elementwise_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -2]), size = tensor<int32, [3]>([1, 256, 2]), x = input_13_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 30]> input_23_cast = add(x = input_13_cast_elementwise_delayed, y = y_4_cast);
            tensor<int32, [1]> var_172 = const()[name = tensor<string, []>("op_172"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_174 = const()[name = tensor<string, []>("op_174"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_25_pad_type_0 = const()[name = tensor<string, []>("input_25_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_25_pad_0 = const()[name = tensor<string, []>("input_25_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_2_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_2_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(864064)))];
            tensor<fp16, [1, 256, 30]> input_25_cast = conv(dilations = var_174, groups = var_16, pad = input_25_pad_0, pad_type = input_25_pad_type_0, strides = var_172, weight = stem_sep_module_2_tcn_0_weight_to_fp16, x = input_23_cast);
            tensor<fp16, [256]> var_178_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_178_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(995200)))];
            tensor<fp16, [1, 256, 30]> var_178_cast = leaky_relu(alpha = tensor<fp16, []>(-0x1.c04p-1), x = input_25_cast);
            tensor<int32, [1]> var_182 = const()[name = tensor<string, []>("op_182"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_11_cast = reduce_mean(axes = var_182, keep_dims = var_12, x = var_178_cast);
            tensor<fp16, [1, 256, 30]> sub_5_cast = sub(x = var_178_cast, y = mean_y_11_cast);
            tensor<fp16, [1, 256, 30]> square_5_cast = square(x = sub_5_cast);
            tensor<int32, [1]> reduce_mean_11_axes_0 = const()[name = tensor<string, []>("reduce_mean_11_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_11_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_11_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_11_cast = reduce_mean(axes = reduce_mean_11_axes_0, keep_dims = reduce_mean_11_keep_dims_0, x = square_5_cast);
            tensor<fp16, [1, 1, 30]> sqrt_5_cast = sqrt(x = reduce_mean_11_cast);
            tensor<fp16, []> mul_5_y_0_to_fp16 = const()[name = tensor<string, []>("mul_5_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_5_cast = mul(x = sqrt_5_cast, y = mul_5_y_0_to_fp16);
            tensor<fp16, []> var_186_to_fp16 = const()[name = tensor<string, []>("op_186_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_11_cast = add(x = mul_5_cast, y = var_186_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_2_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_2_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(995776)))];
            tensor<fp16, [1, 256, 30]> var_189_cast = mul(x = stem_sep_module_2_tcn_2_norm_gamma_to_fp16, y = sub_5_cast);
            tensor<fp16, [1, 256, 30]> var_190_cast = real_div(x = var_189_cast, y = std_y_11_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_2_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_2_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(996352)))];
            tensor<fp16, [1, 256, 30]> input_27_cast = add(x = var_190_cast, y = stem_sep_module_2_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 4, 4])];
            tensor<string, []> input_29_mode_0 = const()[name = tensor<string, []>("input_29_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_29_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_29_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 38]> input_29_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_27_cast_in_state, input_27_cast));
            tensor<fp16, [1, 256, 8]> input_27_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -8]), size = tensor<int32, [3]>([1, 256, 8]), x = input_29_cast);
            tensor<int32, [1]> var_195 = const()[name = tensor<string, []>("op_195"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_197 = const()[name = tensor<string, []>("op_197"), val = tensor<int32, [1]>([4])];
            tensor<string, []> input_31_pad_type_0 = const()[name = tensor<string, []>("input_31_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_31_pad_0 = const()[name = tensor<string, []>("input_31_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_2_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_2_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(996928)))];
            tensor<fp16, [1, 256, 30]> input_31_cast = conv(dilations = var_197, groups = var_4, pad = input_31_pad_0, pad_type = input_31_pad_type_0, strides = var_195, weight = stem_sep_module_2_tcn_4_weight_to_fp16, x = input_29_cast);
            tensor<fp16, [256]> var_201_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_201_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(998528)))];
            tensor<fp16, [1, 256, 30]> var_201_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.7b8p-2), x = input_31_cast);
            tensor<int32, [1]> var_205 = const()[name = tensor<string, []>("op_205"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_13_cast = reduce_mean(axes = var_205, keep_dims = var_12, x = var_201_cast);
            tensor<fp16, [1, 256, 30]> sub_6_cast = sub(x = var_201_cast, y = mean_y_13_cast);
            tensor<fp16, [1, 256, 30]> square_6_cast = square(x = sub_6_cast);
            tensor<int32, [1]> reduce_mean_13_axes_0 = const()[name = tensor<string, []>("reduce_mean_13_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_13_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_13_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_13_cast = reduce_mean(axes = reduce_mean_13_axes_0, keep_dims = reduce_mean_13_keep_dims_0, x = square_6_cast);
            tensor<fp16, [1, 1, 30]> sqrt_6_cast = sqrt(x = reduce_mean_13_cast);
            tensor<fp16, []> mul_6_y_0_to_fp16 = const()[name = tensor<string, []>("mul_6_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_6_cast = mul(x = sqrt_6_cast, y = mul_6_y_0_to_fp16);
            tensor<fp16, []> var_209_to_fp16 = const()[name = tensor<string, []>("op_209_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_13_cast = add(x = mul_6_cast, y = var_209_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_2_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_2_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(999104)))];
            tensor<fp16, [1, 256, 30]> var_212_cast = mul(x = stem_sep_module_2_tcn_6_norm_gamma_to_fp16, y = sub_6_cast);
            tensor<fp16, [1, 256, 30]> var_213_cast = real_div(x = var_212_cast, y = std_y_13_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_2_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_2_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(999680)))];
            tensor<fp16, [1, 256, 30]> y_6_cast = add(x = var_213_cast, y = stem_sep_module_2_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 34]> input_23_cast_elementwise_expanded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_23_cast_elementwise_in_state, input_23_cast));
            tensor<fp16, [1, 256, 30]> input_23_cast_elementwise_delayed = slice_by_size(begin = tensor<int32, [3]>([0, 0, 0]), size = tensor<int32, [3]>([1, 256, 30]), x = input_23_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 4]> input_23_cast_elementwise_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -4]), size = tensor<int32, [3]>([1, 256, 4]), x = input_23_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 30]> input_33_cast = add(x = input_23_cast_elementwise_delayed, y = y_6_cast);
            tensor<int32, [1]> var_224 = const()[name = tensor<string, []>("op_224"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_226 = const()[name = tensor<string, []>("op_226"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_35_pad_type_0 = const()[name = tensor<string, []>("input_35_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_35_pad_0 = const()[name = tensor<string, []>("input_35_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_3_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_3_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1000256)))];
            tensor<fp16, [1, 256, 30]> input_35_cast = conv(dilations = var_226, groups = var_16, pad = input_35_pad_0, pad_type = input_35_pad_type_0, strides = var_224, weight = stem_sep_module_3_tcn_0_weight_to_fp16, x = input_33_cast);
            tensor<fp16, [256]> var_230_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_230_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1131392)))];
            tensor<fp16, [1, 256, 30]> var_230_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.c98p-2), x = input_35_cast);
            tensor<int32, [1]> var_234 = const()[name = tensor<string, []>("op_234"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_15_cast = reduce_mean(axes = var_234, keep_dims = var_12, x = var_230_cast);
            tensor<fp16, [1, 256, 30]> sub_7_cast = sub(x = var_230_cast, y = mean_y_15_cast);
            tensor<fp16, [1, 256, 30]> square_7_cast = square(x = sub_7_cast);
            tensor<int32, [1]> reduce_mean_15_axes_0 = const()[name = tensor<string, []>("reduce_mean_15_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_15_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_15_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_15_cast = reduce_mean(axes = reduce_mean_15_axes_0, keep_dims = reduce_mean_15_keep_dims_0, x = square_7_cast);
            tensor<fp16, [1, 1, 30]> sqrt_7_cast = sqrt(x = reduce_mean_15_cast);
            tensor<fp16, []> mul_7_y_0_to_fp16 = const()[name = tensor<string, []>("mul_7_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_7_cast = mul(x = sqrt_7_cast, y = mul_7_y_0_to_fp16);
            tensor<fp16, []> var_238_to_fp16 = const()[name = tensor<string, []>("op_238_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_15_cast = add(x = mul_7_cast, y = var_238_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_3_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_3_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1131968)))];
            tensor<fp16, [1, 256, 30]> var_241_cast = mul(x = stem_sep_module_3_tcn_2_norm_gamma_to_fp16, y = sub_7_cast);
            tensor<fp16, [1, 256, 30]> var_242_cast = real_div(x = var_241_cast, y = std_y_15_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_3_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_3_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1132544)))];
            tensor<fp16, [1, 256, 30]> input_37_cast = add(x = var_242_cast, y = stem_sep_module_3_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_39_pad_0 = const()[name = tensor<string, []>("input_39_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 8, 8])];
            tensor<string, []> input_39_mode_0 = const()[name = tensor<string, []>("input_39_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_39_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_39_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 46]> input_39_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_37_cast_in_state, input_37_cast));
            tensor<fp16, [1, 256, 16]> input_37_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -16]), size = tensor<int32, [3]>([1, 256, 16]), x = input_39_cast);
            tensor<int32, [1]> var_247 = const()[name = tensor<string, []>("op_247"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_249 = const()[name = tensor<string, []>("op_249"), val = tensor<int32, [1]>([8])];
            tensor<string, []> input_41_pad_type_0 = const()[name = tensor<string, []>("input_41_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_41_pad_0 = const()[name = tensor<string, []>("input_41_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_3_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_3_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1133120)))];
            tensor<fp16, [1, 256, 30]> input_41_cast = conv(dilations = var_249, groups = var_4, pad = input_41_pad_0, pad_type = input_41_pad_type_0, strides = var_247, weight = stem_sep_module_3_tcn_4_weight_to_fp16, x = input_39_cast);
            tensor<fp16, [256]> var_253_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_253_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1134720)))];
            tensor<fp16, [1, 256, 30]> var_253_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.d38p-2), x = input_41_cast);
            tensor<int32, [1]> var_257 = const()[name = tensor<string, []>("op_257"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_17_cast = reduce_mean(axes = var_257, keep_dims = var_12, x = var_253_cast);
            tensor<fp16, [1, 256, 30]> sub_8_cast = sub(x = var_253_cast, y = mean_y_17_cast);
            tensor<fp16, [1, 256, 30]> square_8_cast = square(x = sub_8_cast);
            tensor<int32, [1]> reduce_mean_17_axes_0 = const()[name = tensor<string, []>("reduce_mean_17_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_17_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_17_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_17_cast = reduce_mean(axes = reduce_mean_17_axes_0, keep_dims = reduce_mean_17_keep_dims_0, x = square_8_cast);
            tensor<fp16, [1, 1, 30]> sqrt_8_cast = sqrt(x = reduce_mean_17_cast);
            tensor<fp16, []> mul_8_y_0_to_fp16 = const()[name = tensor<string, []>("mul_8_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_8_cast = mul(x = sqrt_8_cast, y = mul_8_y_0_to_fp16);
            tensor<fp16, []> var_261_to_fp16 = const()[name = tensor<string, []>("op_261_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_17_cast = add(x = mul_8_cast, y = var_261_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_3_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_3_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1135296)))];
            tensor<fp16, [1, 256, 30]> var_264_cast = mul(x = stem_sep_module_3_tcn_6_norm_gamma_to_fp16, y = sub_8_cast);
            tensor<fp16, [1, 256, 30]> var_265_cast = real_div(x = var_264_cast, y = std_y_17_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_3_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_3_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1135872)))];
            tensor<fp16, [1, 256, 30]> y_8_cast = add(x = var_265_cast, y = stem_sep_module_3_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 38]> input_33_cast_elementwise_expanded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_33_cast_elementwise_in_state, input_33_cast));
            tensor<fp16, [1, 256, 30]> input_33_cast_elementwise_delayed = slice_by_size(begin = tensor<int32, [3]>([0, 0, 0]), size = tensor<int32, [3]>([1, 256, 30]), x = input_33_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 8]> input_33_cast_elementwise_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -8]), size = tensor<int32, [3]>([1, 256, 8]), x = input_33_cast_elementwise_expanded);
            tensor<fp16, [1, 256, 30]> input_43_cast = add(x = input_33_cast_elementwise_delayed, y = y_8_cast);
            tensor<int32, [1]> var_276 = const()[name = tensor<string, []>("op_276"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_278 = const()[name = tensor<string, []>("op_278"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_45_pad_type_0 = const()[name = tensor<string, []>("input_45_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_45_pad_0 = const()[name = tensor<string, []>("input_45_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_4_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_4_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1136448)))];
            tensor<fp16, [1, 256, 30]> input_45_cast = conv(dilations = var_278, groups = var_16, pad = input_45_pad_0, pad_type = input_45_pad_type_0, strides = var_276, weight = stem_sep_module_4_tcn_0_weight_to_fp16, x = input_43_cast);
            tensor<fp16, [256]> var_282_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_282_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1267584)))];
            tensor<fp16, [1, 256, 30]> var_282_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.978p+1), x = input_45_cast);
            tensor<int32, [1]> var_286 = const()[name = tensor<string, []>("op_286"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_19_cast = reduce_mean(axes = var_286, keep_dims = var_12, x = var_282_cast);
            tensor<fp16, [1, 256, 30]> sub_9_cast = sub(x = var_282_cast, y = mean_y_19_cast);
            tensor<fp16, [1, 256, 30]> square_9_cast = square(x = sub_9_cast);
            tensor<int32, [1]> reduce_mean_19_axes_0 = const()[name = tensor<string, []>("reduce_mean_19_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_19_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_19_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_19_cast = reduce_mean(axes = reduce_mean_19_axes_0, keep_dims = reduce_mean_19_keep_dims_0, x = square_9_cast);
            tensor<fp16, [1, 1, 30]> sqrt_9_cast = sqrt(x = reduce_mean_19_cast);
            tensor<fp16, []> mul_9_y_0_to_fp16 = const()[name = tensor<string, []>("mul_9_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_9_cast = mul(x = sqrt_9_cast, y = mul_9_y_0_to_fp16);
            tensor<fp16, []> var_290_to_fp16 = const()[name = tensor<string, []>("op_290_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_19_cast = add(x = mul_9_cast, y = var_290_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_4_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_4_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1268160)))];
            tensor<fp16, [1, 256, 30]> var_293_cast = mul(x = stem_sep_module_4_tcn_2_norm_gamma_to_fp16, y = sub_9_cast);
            tensor<fp16, [1, 256, 30]> var_294_cast = real_div(x = var_293_cast, y = std_y_19_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_4_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_4_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1268736)))];
            tensor<fp16, [1, 256, 30]> input_47_cast = add(x = var_294_cast, y = stem_sep_module_4_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_49_pad_0 = const()[name = tensor<string, []>("input_49_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 32, 0])];
            tensor<string, []> input_49_mode_0 = const()[name = tensor<string, []>("input_49_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_49_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_49_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 62]> input_49_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_47_cast_in_state, input_47_cast));
            tensor<fp16, [1, 256, 32]> input_47_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -32]), size = tensor<int32, [3]>([1, 256, 32]), x = input_49_cast);
            tensor<int32, [1]> var_299 = const()[name = tensor<string, []>("op_299"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_301 = const()[name = tensor<string, []>("op_301"), val = tensor<int32, [1]>([16])];
            tensor<string, []> input_51_pad_type_0 = const()[name = tensor<string, []>("input_51_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_51_pad_0 = const()[name = tensor<string, []>("input_51_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_4_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_4_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1269312)))];
            tensor<fp16, [1, 256, 30]> input_51_cast = conv(dilations = var_301, groups = var_4, pad = input_51_pad_0, pad_type = input_51_pad_type_0, strides = var_299, weight = stem_sep_module_4_tcn_4_weight_to_fp16, x = input_49_cast);
            tensor<fp16, [256]> var_305_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_305_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1270912)))];
            tensor<fp16, [1, 256, 30]> var_305_cast = leaky_relu(alpha = tensor<fp16, []>(-0x1.754p-1), x = input_51_cast);
            tensor<int32, [1]> var_309 = const()[name = tensor<string, []>("op_309"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_21_cast = reduce_mean(axes = var_309, keep_dims = var_12, x = var_305_cast);
            tensor<fp16, [1, 256, 30]> sub_10_cast = sub(x = var_305_cast, y = mean_y_21_cast);
            tensor<fp16, [1, 256, 30]> square_10_cast = square(x = sub_10_cast);
            tensor<int32, [1]> reduce_mean_21_axes_0 = const()[name = tensor<string, []>("reduce_mean_21_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_21_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_21_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_21_cast = reduce_mean(axes = reduce_mean_21_axes_0, keep_dims = reduce_mean_21_keep_dims_0, x = square_10_cast);
            tensor<fp16, [1, 1, 30]> sqrt_10_cast = sqrt(x = reduce_mean_21_cast);
            tensor<fp16, []> mul_10_y_0_to_fp16 = const()[name = tensor<string, []>("mul_10_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_10_cast = mul(x = sqrt_10_cast, y = mul_10_y_0_to_fp16);
            tensor<fp16, []> var_313_to_fp16 = const()[name = tensor<string, []>("op_313_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_21_cast = add(x = mul_10_cast, y = var_313_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_4_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_4_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1271488)))];
            tensor<fp16, [1, 256, 30]> var_316_cast = mul(x = stem_sep_module_4_tcn_6_norm_gamma_to_fp16, y = sub_10_cast);
            tensor<fp16, [1, 256, 30]> var_317_cast = real_div(x = var_316_cast, y = std_y_21_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_4_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_4_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1272064)))];
            tensor<fp16, [1, 256, 30]> y_10_cast = add(x = var_317_cast, y = stem_sep_module_4_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 30]> input_53_cast = add(x = input_43_cast, y = y_10_cast);
            tensor<int32, [1]> var_328 = const()[name = tensor<string, []>("op_328"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_330 = const()[name = tensor<string, []>("op_330"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_55_pad_type_0 = const()[name = tensor<string, []>("input_55_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_55_pad_0 = const()[name = tensor<string, []>("input_55_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_5_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_5_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1272640)))];
            tensor<fp16, [1, 256, 30]> input_55_cast = conv(dilations = var_330, groups = var_16, pad = input_55_pad_0, pad_type = input_55_pad_type_0, strides = var_328, weight = stem_sep_module_5_tcn_0_weight_to_fp16, x = input_53_cast);
            tensor<fp16, [256]> var_334_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_334_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1403776)))];
            tensor<fp16, [1, 256, 30]> var_334_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.444p-2), x = input_55_cast);
            tensor<int32, [1]> var_338 = const()[name = tensor<string, []>("op_338"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_23_cast = reduce_mean(axes = var_338, keep_dims = var_12, x = var_334_cast);
            tensor<fp16, [1, 256, 30]> sub_11_cast = sub(x = var_334_cast, y = mean_y_23_cast);
            tensor<fp16, [1, 256, 30]> square_11_cast = square(x = sub_11_cast);
            tensor<int32, [1]> reduce_mean_23_axes_0 = const()[name = tensor<string, []>("reduce_mean_23_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_23_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_23_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_23_cast = reduce_mean(axes = reduce_mean_23_axes_0, keep_dims = reduce_mean_23_keep_dims_0, x = square_11_cast);
            tensor<fp16, [1, 1, 30]> sqrt_11_cast = sqrt(x = reduce_mean_23_cast);
            tensor<fp16, []> mul_11_y_0_to_fp16 = const()[name = tensor<string, []>("mul_11_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_11_cast = mul(x = sqrt_11_cast, y = mul_11_y_0_to_fp16);
            tensor<fp16, []> var_342_to_fp16 = const()[name = tensor<string, []>("op_342_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_23_cast = add(x = mul_11_cast, y = var_342_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_5_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_5_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1404352)))];
            tensor<fp16, [1, 256, 30]> var_345_cast = mul(x = stem_sep_module_5_tcn_2_norm_gamma_to_fp16, y = sub_11_cast);
            tensor<fp16, [1, 256, 30]> var_346_cast = real_div(x = var_345_cast, y = std_y_23_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_5_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_5_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1404928)))];
            tensor<fp16, [1, 256, 30]> input_57_cast = add(x = var_346_cast, y = stem_sep_module_5_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_59_pad_0 = const()[name = tensor<string, []>("input_59_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 64, 0])];
            tensor<string, []> input_59_mode_0 = const()[name = tensor<string, []>("input_59_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_59_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_59_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 94]> input_59_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_57_cast_in_state, input_57_cast));
            tensor<fp16, [1, 256, 64]> input_57_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -64]), size = tensor<int32, [3]>([1, 256, 64]), x = input_59_cast);
            tensor<int32, [1]> var_351 = const()[name = tensor<string, []>("op_351"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_353 = const()[name = tensor<string, []>("op_353"), val = tensor<int32, [1]>([32])];
            tensor<string, []> input_61_pad_type_0 = const()[name = tensor<string, []>("input_61_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_61_pad_0 = const()[name = tensor<string, []>("input_61_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_5_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_5_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1405504)))];
            tensor<fp16, [1, 256, 30]> input_61_cast = conv(dilations = var_353, groups = var_4, pad = input_61_pad_0, pad_type = input_61_pad_type_0, strides = var_351, weight = stem_sep_module_5_tcn_4_weight_to_fp16, x = input_59_cast);
            tensor<fp16, [256]> var_357_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_357_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1407104)))];
            tensor<fp16, [1, 256, 30]> var_357_cast = leaky_relu(alpha = tensor<fp16, []>(-0x1.2a8p-1), x = input_61_cast);
            tensor<int32, [1]> var_361 = const()[name = tensor<string, []>("op_361"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_25_cast = reduce_mean(axes = var_361, keep_dims = var_12, x = var_357_cast);
            tensor<fp16, [1, 256, 30]> sub_12_cast = sub(x = var_357_cast, y = mean_y_25_cast);
            tensor<fp16, [1, 256, 30]> square_12_cast = square(x = sub_12_cast);
            tensor<int32, [1]> reduce_mean_25_axes_0 = const()[name = tensor<string, []>("reduce_mean_25_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_25_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_25_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_25_cast = reduce_mean(axes = reduce_mean_25_axes_0, keep_dims = reduce_mean_25_keep_dims_0, x = square_12_cast);
            tensor<fp16, [1, 1, 30]> sqrt_12_cast = sqrt(x = reduce_mean_25_cast);
            tensor<fp16, []> mul_12_y_0_to_fp16 = const()[name = tensor<string, []>("mul_12_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_12_cast = mul(x = sqrt_12_cast, y = mul_12_y_0_to_fp16);
            tensor<fp16, []> var_365_to_fp16 = const()[name = tensor<string, []>("op_365_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_25_cast = add(x = mul_12_cast, y = var_365_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_5_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_5_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1407680)))];
            tensor<fp16, [1, 256, 30]> var_368_cast = mul(x = stem_sep_module_5_tcn_6_norm_gamma_to_fp16, y = sub_12_cast);
            tensor<fp16, [1, 256, 30]> var_369_cast = real_div(x = var_368_cast, y = std_y_25_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_5_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_5_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1408256)))];
            tensor<fp16, [1, 256, 30]> y_12_cast = add(x = var_369_cast, y = stem_sep_module_5_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 30]> input_63_cast = add(x = input_53_cast, y = y_12_cast);
            tensor<int32, [1]> var_380 = const()[name = tensor<string, []>("op_380"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_382 = const()[name = tensor<string, []>("op_382"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_65_pad_type_0 = const()[name = tensor<string, []>("input_65_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_65_pad_0 = const()[name = tensor<string, []>("input_65_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_6_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_6_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1408832)))];
            tensor<fp16, [1, 256, 30]> input_65_cast = conv(dilations = var_382, groups = var_16, pad = input_65_pad_0, pad_type = input_65_pad_type_0, strides = var_380, weight = stem_sep_module_6_tcn_0_weight_to_fp16, x = input_63_cast);
            tensor<fp16, [256]> var_386_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_386_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1539968)))];
            tensor<fp16, [1, 256, 30]> var_386_cast = leaky_relu(alpha = tensor<fp16, []>(0x1.28p-2), x = input_65_cast);
            tensor<int32, [1]> var_390 = const()[name = tensor<string, []>("op_390"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_27_cast = reduce_mean(axes = var_390, keep_dims = var_12, x = var_386_cast);
            tensor<fp16, [1, 256, 30]> sub_13_cast = sub(x = var_386_cast, y = mean_y_27_cast);
            tensor<fp16, [1, 256, 30]> square_13_cast = square(x = sub_13_cast);
            tensor<int32, [1]> reduce_mean_27_axes_0 = const()[name = tensor<string, []>("reduce_mean_27_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_27_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_27_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_27_cast = reduce_mean(axes = reduce_mean_27_axes_0, keep_dims = reduce_mean_27_keep_dims_0, x = square_13_cast);
            tensor<fp16, [1, 1, 30]> sqrt_13_cast = sqrt(x = reduce_mean_27_cast);
            tensor<fp16, []> mul_13_y_0_to_fp16 = const()[name = tensor<string, []>("mul_13_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_13_cast = mul(x = sqrt_13_cast, y = mul_13_y_0_to_fp16);
            tensor<fp16, []> var_394_to_fp16 = const()[name = tensor<string, []>("op_394_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_27_cast = add(x = mul_13_cast, y = var_394_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_6_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_6_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1540544)))];
            tensor<fp16, [1, 256, 30]> var_397_cast = mul(x = stem_sep_module_6_tcn_2_norm_gamma_to_fp16, y = sub_13_cast);
            tensor<fp16, [1, 256, 30]> var_398_cast = real_div(x = var_397_cast, y = std_y_27_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_6_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_6_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1541120)))];
            tensor<fp16, [1, 256, 30]> input_67_cast = add(x = var_398_cast, y = stem_sep_module_6_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_69_pad_0 = const()[name = tensor<string, []>("input_69_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 128, 0])];
            tensor<string, []> input_69_mode_0 = const()[name = tensor<string, []>("input_69_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_69_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_69_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 158]> input_69_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_67_cast_in_state, input_67_cast));
            tensor<fp16, [1, 256, 128]> input_67_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -128]), size = tensor<int32, [3]>([1, 256, 128]), x = input_69_cast);
            tensor<int32, [1]> var_403 = const()[name = tensor<string, []>("op_403"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_405 = const()[name = tensor<string, []>("op_405"), val = tensor<int32, [1]>([64])];
            tensor<string, []> input_71_pad_type_0 = const()[name = tensor<string, []>("input_71_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_71_pad_0 = const()[name = tensor<string, []>("input_71_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_6_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_6_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1541696)))];
            tensor<fp16, [1, 256, 30]> input_71_cast = conv(dilations = var_405, groups = var_4, pad = input_71_pad_0, pad_type = input_71_pad_type_0, strides = var_403, weight = stem_sep_module_6_tcn_4_weight_to_fp16, x = input_69_cast);
            tensor<fp16, [256]> var_409_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_409_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1543296)))];
            tensor<fp16, [1, 256, 30]> var_409_cast = leaky_relu(alpha = tensor<fp16, []>(-0x1.38cp-1), x = input_71_cast);
            tensor<int32, [1]> var_413 = const()[name = tensor<string, []>("op_413"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_29_cast = reduce_mean(axes = var_413, keep_dims = var_12, x = var_409_cast);
            tensor<fp16, [1, 256, 30]> sub_14_cast = sub(x = var_409_cast, y = mean_y_29_cast);
            tensor<fp16, [1, 256, 30]> square_14_cast = square(x = sub_14_cast);
            tensor<int32, [1]> reduce_mean_29_axes_0 = const()[name = tensor<string, []>("reduce_mean_29_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_29_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_29_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_29_cast = reduce_mean(axes = reduce_mean_29_axes_0, keep_dims = reduce_mean_29_keep_dims_0, x = square_14_cast);
            tensor<fp16, [1, 1, 30]> sqrt_14_cast = sqrt(x = reduce_mean_29_cast);
            tensor<fp16, []> mul_14_y_0_to_fp16 = const()[name = tensor<string, []>("mul_14_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_14_cast = mul(x = sqrt_14_cast, y = mul_14_y_0_to_fp16);
            tensor<fp16, []> var_417_to_fp16 = const()[name = tensor<string, []>("op_417_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_29_cast = add(x = mul_14_cast, y = var_417_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_6_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_6_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1543872)))];
            tensor<fp16, [1, 256, 30]> var_420_cast = mul(x = stem_sep_module_6_tcn_6_norm_gamma_to_fp16, y = sub_14_cast);
            tensor<fp16, [1, 256, 30]> var_421_cast = real_div(x = var_420_cast, y = std_y_29_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_6_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_6_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1544448)))];
            tensor<fp16, [1, 256, 30]> y_14_cast = add(x = var_421_cast, y = stem_sep_module_6_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 30]> input_3_cast = add(x = input_63_cast, y = y_14_cast);
            tensor<int32, [1]> var_432 = const()[name = tensor<string, []>("op_432"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_434 = const()[name = tensor<string, []>("op_434"), val = tensor<int32, [1]>([1])];
            tensor<string, []> input_2_pad_type_0 = const()[name = tensor<string, []>("input_2_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_2_pad_0 = const()[name = tensor<string, []>("input_2_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 256, 1]> stem_sep_module_7_tcn_0_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_7_tcn_0_weight_to_fp16"), val = tensor<fp16, [256, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1545024)))];
            tensor<fp16, [1, 256, 30]> input_2_cast = conv(dilations = var_434, groups = var_16, pad = input_2_pad_0, pad_type = input_2_pad_type_0, strides = var_432, weight = stem_sep_module_7_tcn_0_weight_to_fp16, x = input_3_cast);
            tensor<fp16, [256]> var_438_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_438_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1676160)))];
            tensor<fp16, [1, 256, 30]> var_438_cast = leaky_relu(alpha = tensor<fp16, []>(0x1p+0), x = input_2_cast);
            tensor<int32, [1]> var_442 = const()[name = tensor<string, []>("op_442"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_2_cast = reduce_mean(axes = var_442, keep_dims = var_12, x = var_438_cast);
            tensor<fp16, [1, 256, 30]> sub_15_cast = sub(x = var_438_cast, y = mean_y_2_cast);
            tensor<fp16, [1, 256, 30]> square_15_cast = square(x = sub_15_cast);
            tensor<int32, [1]> reduce_mean_31_axes_0 = const()[name = tensor<string, []>("reduce_mean_31_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_31_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_31_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_31_cast = reduce_mean(axes = reduce_mean_31_axes_0, keep_dims = reduce_mean_31_keep_dims_0, x = square_15_cast);
            tensor<fp16, [1, 1, 30]> sqrt_15_cast = sqrt(x = reduce_mean_31_cast);
            tensor<fp16, []> mul_15_y_0_to_fp16 = const()[name = tensor<string, []>("mul_15_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_15_cast = mul(x = sqrt_15_cast, y = mul_15_y_0_to_fp16);
            tensor<fp16, []> var_446_to_fp16 = const()[name = tensor<string, []>("op_446_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_2_cast = add(x = mul_15_cast, y = var_446_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_7_tcn_2_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_7_tcn_2_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1676736)))];
            tensor<fp16, [1, 256, 30]> var_449_cast = mul(x = stem_sep_module_7_tcn_2_norm_gamma_to_fp16, y = sub_15_cast);
            tensor<fp16, [1, 256, 30]> var_450_cast = real_div(x = var_449_cast, y = std_y_2_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_7_tcn_2_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_7_tcn_2_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1677312)))];
            tensor<fp16, [1, 256, 30]> input_4_cast = add(x = var_450_cast, y = stem_sep_module_7_tcn_2_norm_beta_to_fp16);
            tensor<int32, [6]> input_6_pad_0 = const()[name = tensor<string, []>("input_6_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 256, 0])];
            tensor<string, []> input_6_mode_0 = const()[name = tensor<string, []>("input_6_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> input_6_constant_val_0_to_fp16 = const()[name = tensor<string, []>("input_6_constant_val_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 286]> input_6_cast = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input_4_cast_in_state, input_4_cast));
            tensor<fp16, [1, 256, 256]> input_4_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -256]), size = tensor<int32, [3]>([1, 256, 256]), x = input_6_cast);
            tensor<int32, [1]> var_455 = const()[name = tensor<string, []>("op_455"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_457 = const()[name = tensor<string, []>("op_457"), val = tensor<int32, [1]>([128])];
            tensor<string, []> input_1_pad_type_0 = const()[name = tensor<string, []>("input_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_1_pad_0 = const()[name = tensor<string, []>("input_1_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<fp16, [256, 1, 3]> stem_sep_module_7_tcn_4_weight_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_7_tcn_4_weight_to_fp16"), val = tensor<fp16, [256, 1, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1677888)))];
            tensor<fp16, [1, 256, 30]> input_1_cast = conv(dilations = var_457, groups = var_4, pad = input_1_pad_0, pad_type = input_1_pad_type_0, strides = var_455, weight = stem_sep_module_7_tcn_4_weight_to_fp16, x = input_6_cast);
            tensor<fp16, [256]> var_461_alpha_0_to_fp16 = const()[name = tensor<string, []>("op_461_alpha_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1679488)))];
            tensor<fp16, [1, 256, 30]> var_461_cast = leaky_relu(alpha = tensor<fp16, []>(0x1p+0), x = input_1_cast);
            tensor<int32, [1]> var_465 = const()[name = tensor<string, []>("op_465"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 30]> mean_y_1_cast = reduce_mean(axes = var_465, keep_dims = var_12, x = var_461_cast);
            tensor<fp16, [1, 256, 30]> sub_16_cast = sub(x = var_461_cast, y = mean_y_1_cast);
            tensor<fp16, [1, 256, 30]> square_16_cast = square(x = sub_16_cast);
            tensor<int32, [1]> reduce_mean_33_axes_0 = const()[name = tensor<string, []>("reduce_mean_33_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<bool, []> reduce_mean_33_keep_dims_0 = const()[name = tensor<string, []>("reduce_mean_33_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 30]> reduce_mean_33_cast = reduce_mean(axes = reduce_mean_33_axes_0, keep_dims = reduce_mean_33_keep_dims_0, x = square_16_cast);
            tensor<fp16, [1, 1, 30]> sqrt_16_cast = sqrt(x = reduce_mean_33_cast);
            tensor<fp16, []> mul_16_y_0_to_fp16 = const()[name = tensor<string, []>("mul_16_y_0_to_fp16"), val = tensor<fp16, []>(0x1.008p+0)];
            tensor<fp16, [1, 1, 30]> mul_16_cast = mul(x = sqrt_16_cast, y = mul_16_y_0_to_fp16);
            tensor<fp16, []> var_469_to_fp16 = const()[name = tensor<string, []>("op_469_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 30]> std_y_1_cast = add(x = mul_16_cast, y = var_469_to_fp16);
            tensor<fp16, [1, 256, 1]> stem_sep_module_7_tcn_6_norm_gamma_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_7_tcn_6_norm_gamma_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1680064)))];
            tensor<fp16, [1, 256, 30]> var_472_cast = mul(x = stem_sep_module_7_tcn_6_norm_gamma_to_fp16, y = sub_16_cast);
            tensor<fp16, [1, 256, 30]> var_473_cast = real_div(x = var_472_cast, y = std_y_1_cast);
            tensor<fp16, [1, 256, 1]> stem_sep_module_7_tcn_6_norm_beta_to_fp16 = const()[name = tensor<string, []>("stem_sep_module_7_tcn_6_norm_beta_to_fp16"), val = tensor<fp16, [1, 256, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1680640)))];
            tensor<fp16, [1, 256, 30]> y_1_cast = add(x = var_473_cast, y = stem_sep_module_7_tcn_6_norm_beta_to_fp16);
            tensor<fp16, [1, 256, 30]> x_1_cast = add(x = input_3_cast, y = y_1_cast);
            tensor<int32, [1]> input0_2_axes_0 = const()[name = tensor<string, []>("input0_2_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 256, 30]> input0_2_cast = expand_dims(axes = input0_2_axes_0, x = x_1_cast);
            tensor<int32, [2]> var_478 = const()[name = tensor<string, []>("op_478"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_480 = const()[name = tensor<string, []>("op_480"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input1_1_pad_type_0 = const()[name = tensor<string, []>("input1_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input1_1_pad_0 = const()[name = tensor<string, []>("input1_1_pad_0"), val = tensor<int32, [4]>([256, 256, 0, 0])];
            tensor<fp16, [12, 1, 385, 1]> stem_mask_layer_weight_to_fp16 = const()[name = tensor<string, []>("stem_mask_layer_weight_to_fp16"), val = tensor<fp16, [12, 1, 385, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1681216)))];
            tensor<fp16, [1, 12, 384, 30]> input1_1_cast = conv(dilations = var_480, groups = var_16, pad = input1_1_pad_0, pad_type = input1_1_pad_type_0, strides = var_478, weight = stem_mask_layer_weight_to_fp16, x = input0_2_cast);
            tensor<fp16, [1, 12, 384, 30]> var_483_cast = tanh(x = input1_1_cast);
            tensor<int32, [1]> var_484_axes_0 = const()[name = tensor<string, []>("op_484_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 384, 30]> var_484_cast = expand_dims(axes = var_484_axes_0, x = var_31_cast);
            tensor<fp16, [1, 1, 384, 45]> var_484_cast_elementwise_expanded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (var_484_cast_elementwise_in_state, var_484_cast));
            tensor<fp16, [1, 1, 384, 30]> var_484_cast_elementwise_delayed = slice_by_size(begin = tensor<int32, [4]>([0, 0, 0, 0]), size = tensor<int32, [4]>([1, 1, 384, 30]), x = var_484_cast_elementwise_expanded);
            tensor<fp16, [1, 1, 384, 15]> var_484_cast_elementwise_out_state = slice_by_size(begin = tensor<int32, [4]>([0, 0, 0, -15]), size = tensor<int32, [4]>([1, 1, 384, 15]), x = var_484_cast_elementwise_expanded);
            tensor<fp16, [1, 12, 384, 30]> x_2_cast = mul(x = var_483_cast, y = var_484_cast_elementwise_delayed);
            tensor<int32, [3]> concat_0x = const()[name = tensor<string, []>("concat_0x"), val = tensor<int32, [3]>([1, 4608, -1])];
            tensor<fp16, [1, 4608, 30]> input1_2_cast = reshape(shape = concat_0x, x = x_2_cast);
            tensor<int32, [1]> var_497 = const()[name = tensor<string, []>("op_497"), val = tensor<int32, [1]>([64])];
            tensor<int32, [1]> var_499 = const()[name = tensor<string, []>("op_499"), val = tensor<int32, [1]>([1])];
            tensor<string, []> target_1_pad_type_0 = const()[name = tensor<string, []>("target_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> target_1_pad_0 = const()[name = tensor<string, []>("target_1_pad_0"), val = tensor<int32, [2]>([64, 64])];
            tensor<fp16, [4608, 1, 128]> stem_resynthesizer_weight_to_fp16 = const()[name = tensor<string, []>("stem_resynthesizer_weight_to_fp16"), val = tensor<fp16, [4608, 1, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1690560)))];
            tensor<fp16, [1, 4608, 31]> input1_2_cast_padded = concat(axis = tensor<int32, []>(-1), interleave = tensor<bool, []>(false), values = (input1_2_cast_in_state, input1_2_cast));
            tensor<fp16, [1, 4608, 1]> input1_2_cast_out_state = slice_by_size(begin = tensor<int32, [3]>([0, 0, -1]), size = tensor<int32, [3]>([1, 4608, 1]), x = input1_2_cast_padded);
            tensor<fp16, [1, 12, 1920]> target_1_cast = conv_transpose(dilations = var_499, groups = var_3, pad = target_1_pad_0, pad_type = target_1_pad_type_0, strides = var_497, weight = stem_resynthesizer_weight_to_fp16, x = input1_2_cast_padded);
            tensor<string, []> target_1_cast_to_fp32_dtype_0 = const()[name = tensor<string, []>("target_1_cast_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1, 12, 1920]> target_1 = cast(dtype = target_1_cast_to_fp32_dtype_0, x = target_1_cast);
        } -> (target_1, input1_2_cast_out_state, var_484_cast_elementwise_out_state, input_4_cast_out_state, input_67_cast_out_state, input_57_cast_out_state, input_47_cast_out_state, input_33_cast_elementwise_out_state, input_37_cast_out_state, input_23_cast_elementwise_out_state, input_27_cast_out_state, input_13_cast_elementwise_out_state, input_17_cast_out_state, input_12_cast_elementwise_out_state, input_7_cast_out_state, cast_229_out_state);
}